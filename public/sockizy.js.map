{"version":3,"sources":["sockizyES6.js"],"names":["io","module","SEE","EE","_events","type","listener","ev","_arrayCloneWith","length","argsLen","arguments","evLen","pop","Array","indexOf","_arrayCloneWithout","events","error","Error","e","context","isFn","emitNone","emitOne","emitTwo","emitThree","args","i","emitMany","arr","n","copy","t","handler","self","call","len","arg1","arg2","arg3","apply","exports","packer","holyBuffer","Buffer","MAX_ARGUMENTS_LENGTH","K_MAX_LENGTH","alloc","byteLength","prototype","Object","create","write","toString","encoding","start","end","utf8Slice","utf8ToBytes","string","units","Infinity","codePoint","leadSurrogate","bytes","charCodeAt","push","buf","Math","min","res","firstByte","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","createBuffer","RangeError","Uint8Array","size","offset","remaining","blitBuffer","src","dst","swap","b","m","codePoints","String","fromCharCode","slice","defineProperty","isBigEndian","a","Uint32Array","buffer","byteOffset","sysOffset","createPacket","getId","schema","useHolderArray","holderNew","isArray","schLen","fields","buffers","zeroUI16","pktDataHolder","pktMinSize","pktHasStr","pktBufStrict","pktBufPack","TYPE_STR","TYPE_INT","TYPE_UINT","TYPE_FLOAT","split","name","shift","subType","getTypeId","replace","parseInt","buildTypedBuf","bufType","bufAType","bufBytes","bufABytes","pack","unpack","id","data","tIdx","fieldIdx","pktSize","field","input","_blen","reverse","result","l","bin","cbEndInfo","target","pktOffset","pktOffsetStart","byteLen","needMem","Uint16Array","BYTES_PER_ELEMENT","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","isNaN","JSON","stringify","url","options","WSocket","window","WebSocket","MozWebSocket","Io","_reconnectionDelay","max","reconnectionDelay","_reconnectionAttempts","reconnectionAttempts","_reconnectionAttemptsCount","_packMapByName","Map","_unpackMapById","reconnecting","CONNECTING","OPEN","CLOSING","CLOSED","connect","secure","_pack","send","_ws","_emit","close","tWsUrlParse","trim","wsUrl","wsProtocol","wsSecProtocol","match","document","location","protocol","w","binaryType","onmessage","wsOnMessage","bind","onopen","wsOnOpen","onclose","wsOnClose","onerror","wsOnError","code","reason","shared","forEach","srz","set","packets","callback","keys","testName","r","some","get","bufferedAmount","readyState","socket","event","dataByteLength","pkt","pktSchema","message","moveOffset","rcAttemptsCount","wasClean","setTimeout","_reconnect"],"mappings":"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","file":"sockizy.js","sourcesContent":["const io = (function(module) {\r\n'use strict';\r\n\r\n\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------\r\n\r\nconst SEE = (function() {\r\n    class EE {\r\n        constructor() {\r\n            this._events = {};\r\n        }\r\n\r\n\r\n        on(type, listener) {\r\n            const ev = this._events[type];\r\n\r\n            if(typeof(ev) === \"function\") {\r\n                this._events[type] = [ev, listener];\r\n            }\r\n            else {\r\n                this._events[type] = ev ? this._arrayCloneWith(ev, ev.length, listener) : listener;\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        off(type, listener) {\r\n            const argsLen = arguments.length;\r\n\r\n            //--------------]>\r\n\r\n            if(!argsLen) {\r\n                this._events = {};\r\n                return this;\r\n            }\r\n\r\n            //--------------]>\r\n\r\n            const ev = this._events[type];\r\n\r\n            if(typeof(ev) === \"function\") {\r\n                if(argsLen === 1 || ev === listener) {\r\n                    this._events[type] = null;\r\n                }\r\n\r\n                return this;\r\n            }\r\n\r\n            //--------------]>\r\n\r\n            const evLen = ev && ev.length;\r\n\r\n            //--------------]>\r\n\r\n            if(!evLen) {\r\n                return this;\r\n            }\r\n\r\n            //--------------]>\r\n\r\n            if(argsLen === 1) {\r\n                if(evLen === 1) {\r\n                    ev.pop();\r\n                }\r\n                else {\r\n                    this._events[type] = new Array();\r\n                }\r\n            }\r\n            else if(evLen === 1) {\r\n                if(ev[0] === listener) {\r\n                    ev.pop();\r\n                }\r\n            }\r\n            else if(ev.indexOf(listener) >= 0) {\r\n                this._events[type] = this._arrayCloneWithout(ev, evLen, listener);\r\n            }\r\n\r\n            //--------------]>\r\n\r\n            return this;\r\n        }\r\n\r\n\r\n        _emit(type) {\r\n            const events = this._events[type];\r\n\r\n            //--------------]>\r\n\r\n            if(!events) {\r\n                if(type === \"error\") {\r\n                    const error = arguments[1];\r\n\r\n                    if(error instanceof Error) {\r\n                        throw error;\r\n                    }\r\n                    else {\r\n                        const e = new Error(`Unhandled \"error\" event. (${error})`);\r\n                        e.context = error;\r\n\r\n                        throw e;\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n\r\n            //--------------]>\r\n\r\n            const isFn = typeof(events) === \"function\";\r\n            const argsLen = arguments.length;\r\n\r\n            //--------------]>\r\n\r\n            switch(argsLen) {\r\n                case 1: emitNone(events, isFn, this); break;\r\n                case 2: emitOne(events, isFn, this, arguments[1]); break;\r\n                case 3: emitTwo(events, isFn, this, arguments[1], arguments[2]); break;\r\n                case 4: emitThree(events, isFn, this, arguments[1], arguments[2], arguments[3]); break;\r\n\r\n                default: {\r\n                    const args = new Array(argsLen - 1);\r\n\r\n                    for(let i = 1; i < argsLen; ++i) {\r\n                        args[i - 1] = arguments[i];\r\n                    }\r\n\r\n                    emitMany(events, isFn, this, args);\r\n                }\r\n            }\r\n\r\n            //--------------]>\r\n\r\n            return true;\r\n        }\r\n\r\n        _arrayCloneWithout(arr, n, listener) {\r\n            const copy = new Array(--n);\r\n\r\n            let t;\r\n\r\n            while(n--) {\r\n                t = arr[n];\r\n\r\n                if(listener !== t) {\r\n                    copy[n] = t;\r\n                }\r\n            }\r\n\r\n            return copy;\r\n        }\r\n\r\n        _arrayCloneWith(arr, n, listener) {\r\n            const copy = new Array(n + 1);\r\n\r\n            while(n--) {\r\n                copy[n] = arr[n];\r\n            }\r\n\r\n            copy[n] = listener;\r\n\r\n            return copy;\r\n        }\r\n    }\r\n\r\n    //-----------------------]>\r\n\r\n    return EE;\r\n\r\n    //-----------------------]>\r\n\r\n    function emitNone(handler, isFn, self) {\r\n        if(isFn) {\r\n            handler.call(self);\r\n        }\r\n        else {\r\n            for(let i = 0, len = handler.length; i < len; ++i) {\r\n                handler[i].call(self);\r\n            }\r\n        }\r\n    }\r\n    function emitOne(handler, isFn, self, arg1) {\r\n        if(isFn) {\r\n            handler.call(self, arg1);\r\n        }\r\n        else {\r\n            for(let i = 0, len = handler.length; i < len; ++i) {\r\n                handler[i].call(self, arg1);\r\n            }\r\n        }\r\n    }\r\n    function emitTwo(handler, isFn, self, arg1, arg2) {\r\n        if(isFn) {\r\n            handler.call(self, arg1, arg2);\r\n        }\r\n        else {\r\n            for(let i = 0, len = handler.length; i < len; ++i) {\r\n                handler[i].call(self, arg1, arg2);\r\n            }\r\n        }\r\n    }\r\n    function emitThree(handler, isFn, self, arg1, arg2, arg3) {\r\n        if(isFn) {\r\n            handler.call(self, arg1, arg2, arg3);\r\n        }\r\n        else {\r\n            for(let i = 0, len = handler.length; i < len; ++i) {\r\n                handler[i].call(self, arg1, arg2, arg3);\r\n            }\r\n        }\r\n    }\r\n    function emitMany(handler, isFn, self, args) {\r\n        if(isFn) {\r\n            handler.apply(self, args);\r\n        }\r\n        else {\r\n            for(let i = 0, len = handler.length; i < len; ++i) {\r\n                handler[i].apply(self, args);\r\n            }\r\n        }\r\n    }\r\n})();\r\n\r\n//-----------------------------------------------------\r\n\r\nmodule.exports = SEE;\r\n\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------\r\n\r\nconst packer = (function() {\r\n    const holyBuffer = typeof(Buffer) !== \"undefined\" ? Buffer : (function() {\r\n            const MAX_ARGUMENTS_LENGTH = 0x1000;\r\n            const K_MAX_LENGTH = 0x7fffffff;\r\n\r\n            const Buffer = function() {};\r\n\r\n            //---------------------]>\r\n\r\n            Buffer.alloc = alloc;\r\n            Buffer.byteLength = byteLength;\r\n\r\n            Buffer.prototype = Object.create(null);\r\n            Buffer.prototype.write = write;\r\n            Buffer.prototype.toString = function(encoding, start, end) {\r\n                start = start || 0;\r\n                end = end || this.length;\r\n\r\n                if(end === 0) {\r\n                    return \"\";\r\n                }\r\n\r\n                return utf8Slice(this, start, end);\r\n            };\r\n\r\n            //---------------------]>\r\n\r\n            return Buffer;\r\n\r\n            //---------------------]>\r\n\r\n            function utf8ToBytes(string, units) {\r\n                units = units || Infinity;\r\n\r\n                const length = string.length;\r\n\r\n                let codePoint;\r\n                let leadSurrogate = null;\r\n                let bytes = new Array();\r\n\r\n                for(let i = 0; i < length; ++i) {\r\n                    codePoint = string.charCodeAt(i);\r\n\r\n                    // is surrogate component\r\n                    if(codePoint > 0xD7FF && codePoint < 0xE000) {\r\n                        // last char was a lead\r\n                        if(!leadSurrogate) {\r\n                            // no lead yet\r\n                            if(codePoint > 0xDBFF) {\r\n                                // unexpected trail\r\n                                if((units -= 3) > -1) {\r\n                                    bytes.push(0xEF, 0xBF, 0xBD);\r\n                                }\r\n\r\n                                continue;\r\n                            }\r\n                            else if(i + 1 === length) {\r\n                                // unpaired lead\r\n                                if((units -= 3) > -1) {\r\n                                    bytes.push(0xEF, 0xBF, 0xBD);\r\n                                }\r\n\r\n                                continue;\r\n                            }\r\n\r\n                            // valid lead\r\n                            leadSurrogate = codePoint;\r\n\r\n                            continue;\r\n                        }\r\n\r\n                        // 2 leads in a row\r\n                        if(codePoint < 0xDC00) {\r\n                            if((units -= 3) > -1) {\r\n                                bytes.push(0xEF, 0xBF, 0xBD);\r\n                            }\r\n\r\n                            leadSurrogate = codePoint;\r\n\r\n                            continue;\r\n                        }\r\n\r\n                        // valid surrogate pair\r\n                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\r\n                    }\r\n                    else if(leadSurrogate) {\r\n                        // valid bmp char, but last char was a lead\r\n                        if((units -= 3) > -1) {\r\n                            bytes.push(0xEF, 0xBF, 0xBD);\r\n                        }\r\n                    }\r\n\r\n                    leadSurrogate = null;\r\n\r\n                    // encode utf8\r\n                    if(codePoint < 0x80) {\r\n                        if((units -= 1) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(codePoint);\r\n                    }\r\n                    else if(codePoint < 0x800) {\r\n                        if((units -= 2) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0x6 | 0xC0,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    }\r\n                    else if(codePoint < 0x10000) {\r\n                        if((units -= 3) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0xC | 0xE0,\r\n                            codePoint >> 0x6 & 0x3F | 0x80,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    }\r\n                    else if(codePoint < 0x110000) {\r\n                        if((units -= 4) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0x12 | 0xF0,\r\n                            codePoint >> 0xC & 0x3F | 0x80,\r\n                            codePoint >> 0x6 & 0x3F | 0x80,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    }\r\n                    else {\r\n                        throw new Error(\"Invalid code point\");\r\n                    }\r\n                }\r\n\r\n                return bytes;\r\n            }\r\n\r\n            function utf8Slice(buf, start, end) {\r\n                end = Math.min(buf.length, end);\r\n\r\n                const res = new Array();\r\n                let i = start;\r\n\r\n                while(i < end) {\r\n                    let firstByte = buf[i];\r\n                    let codePoint = null;\r\n                    let bytesPerSequence = (firstByte > 0xEF) ? 4\r\n                        : (firstByte > 0xDF) ? 3\r\n                            : (firstByte > 0xBF) ? 2\r\n                                : 1;\r\n\r\n                    if(i + bytesPerSequence <= end) {\r\n                        let secondByte, thirdByte, fourthByte, tempCodePoint;\r\n\r\n                        switch(bytesPerSequence) {\r\n                            case 1:\r\n                                if(firstByte < 0x80) {\r\n                                    codePoint = firstByte;\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 2:\r\n                                secondByte = buf[i + 1];\r\n\r\n                                if((secondByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0x7F) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 3:\r\n                                secondByte = buf[i + 1];\r\n                                thirdByte = buf[i + 2];\r\n\r\n                                if((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 4:\r\n                                secondByte = buf[i + 1];\r\n                                thirdByte = buf[i + 2];\r\n                                fourthByte = buf[i + 3];\r\n\r\n                                if((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n                        }\r\n                    }\r\n\r\n                    if(codePoint === null) {\r\n                        // we did not generate a valid codePoint so insert a\r\n                        // replacement char (U+FFFD) and advance only 1 byte\r\n                        codePoint = 0xFFFD;\r\n                        bytesPerSequence = 1;\r\n                    }\r\n                    else if(codePoint > 0xFFFF) {\r\n                        // encode to utf16 (surrogate pair dance)\r\n                        codePoint -= 0x10000;\r\n                        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\r\n                        codePoint = 0xDC00 | codePoint & 0x3FF;\r\n                    }\r\n\r\n                    res.push(codePoint);\r\n                    i += bytesPerSequence;\r\n                }\r\n\r\n                return decodeCodePointsArray(res);\r\n            }\r\n\r\n            function createBuffer(length) {\r\n                if(length > K_MAX_LENGTH) {\r\n                    throw new RangeError(\"Invalid typed array length\");\r\n                }\r\n\r\n                const buf = new Uint8Array(length);\r\n\r\n                // buf.__proto__ = Buffer.prototype;\r\n                buf.write = Buffer.prototype.write;\r\n                buf.toString = Buffer.prototype.toString;\r\n\r\n                return buf;\r\n            }\r\n\r\n            function byteLength(string) {\r\n                return utf8ToBytes(string).length;\r\n            }\r\n\r\n            //--------)>\r\n\r\n            function alloc(size) {\r\n                return createBuffer(size);\r\n            }\r\n\r\n            //--------)>\r\n\r\n            function write(string, offset, length) {\r\n                offset = offset || 0;\r\n                length = length || this.length;\r\n\r\n                const remaining = this.length - offset;\r\n\r\n                if(!length || length > remaining) {\r\n                    length = remaining;\r\n                }\r\n\r\n                return blitBuffer(utf8ToBytes(string, this.length - offset), this, offset, length);\r\n            }\r\n\r\n            //--------)>\r\n\r\n            function blitBuffer(src, dst, offset, length) {\r\n                let i;\r\n\r\n                for(i = 0; i < length; ++i) {\r\n                    if((i + offset >= dst.length) || (i >= src.length)) {\r\n                        break;\r\n                    }\r\n\r\n                    dst[i + offset] = src[i];\r\n                }\r\n\r\n                return i;\r\n            }\r\n\r\n            function swap(b, n, m) {\r\n                const i = b[n];\r\n                b[n] = b[m];\r\n                b[m] = i;\r\n            }\r\n\r\n            function decodeCodePointsArray (codePoints) {\r\n                const len = codePoints.length;\r\n\r\n                if(len <= MAX_ARGUMENTS_LENGTH) {\r\n                    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\r\n                }\r\n\r\n                // Decode in chunks to avoid \"call stack size exceeded\".\r\n                let res = \"\";\r\n                let i = 0;\r\n\r\n                while(i < len) {\r\n                    res += String.fromCharCode.apply(\r\n                        String,\r\n                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\r\n                    );\r\n                }\r\n\r\n                return res;\r\n            }\r\n        })();\r\n\r\n    //---------)>\r\n\r\n    if(!Uint8Array.prototype.slice) {\r\n        Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n            \"value\": Array.prototype.slice\r\n        });\r\n    }\r\n\r\n    //-------------------------]>\r\n\r\n    const isBigEndian = (function() {\r\n        const a = new Uint32Array([0x12345678]);\r\n        const b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\r\n\r\n        return b[0] === 0x12;\r\n    })();\r\n\r\n    const sysOffset = 1;\r\n\r\n    //-------------------------]>\r\n\r\n    return {isBigEndian, createPacket, getId};\r\n\r\n    //-------------------------]>\r\n\r\n    function createPacket(schema, useHolderArray, holderNew) {\r\n        if(!Array.isArray(schema)) {\r\n            schema = new Array();\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        const schLen        = schema.length;\r\n\r\n        const fields        = new Array(schLen);\r\n        const buffers       = new Array(schLen);\r\n\r\n        const zeroUI16      = new Uint8Array(2);\r\n\r\n        let pktDataHolder   = useHolderArray ? new Array() : Object.create(null),\r\n            pktMinSize      = 0,\r\n            pktHasStr       = false,\r\n\r\n            pktBufStrict    = null,\r\n            pktBufPack      = null;\r\n\r\n        //-----------------]>\r\n\r\n        const TYPE_STR      = 1;\r\n        const TYPE_INT      = 2;\r\n        const TYPE_UINT     = 4;\r\n        const TYPE_FLOAT    = 8;\r\n\r\n        //-----------------]>\r\n\r\n        for(let e, i = 0; i < schLen; ++i) {\r\n            e = schema[i].split(\":\");\r\n\r\n            //---------]>\r\n\r\n            const name      = e.shift();\r\n            const subType   = e.shift();\r\n\r\n            const type      = getTypeId(subType.replace(/[\\d\\[\\]]/g, \"\"));\r\n            const size      = parseInt(subType.replace(/\\D/g, \"\"), 10) || 0;\r\n\r\n            const [\r\n                bytes,\r\n                bufType,\r\n                bufAType\r\n            ]               = buildTypedBuf(type, size);\r\n\r\n            const bufBytes  = (TYPE_STR & type) ? null : new Uint8Array(bufType.buffer);\r\n            const bufABytes = bufAType ? new Uint8Array(bufAType.buffer) : null;\r\n\r\n            //---------]>\r\n\r\n            fields[i] = [name, type, bytes, bufType, bufBytes, bufAType, bufABytes];\r\n\r\n            pktMinSize += bytes;\r\n\r\n            if(!pktHasStr && (TYPE_STR & type)) {\r\n                pktHasStr = true;\r\n            }\r\n        }\r\n\r\n        pktMinSize += sysOffset;\r\n\r\n        if(!pktHasStr) {\r\n            pktBufStrict = new Uint8Array(pktMinSize);\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        return {pack, unpack};\r\n\r\n        //-----------------]>\r\n\r\n        function pack(id, data) {\r\n            const isArray   = Array.isArray(data);\r\n\r\n            let tIdx,\r\n                fieldIdx    = schLen,\r\n                pktSize     = sysOffset;\r\n\r\n            let field;\r\n            let name, type, bytes, bufType, bufBytes, bufAType, bufABytes;\r\n\r\n            let input;\r\n\r\n            //--------]>\r\n\r\n            while(fieldIdx--) {\r\n                field = fields[fieldIdx];\r\n                [name, type, bytes, bufType, bufBytes, bufAType, bufABytes] = field;\r\n\r\n                input = data[isArray ? fieldIdx : name];\r\n\r\n                //------]>\r\n\r\n                switch(type) {\r\n                    case TYPE_STR: {\r\n                        if(input) {\r\n                            bytes += bufAType[0] = bufType.write(input, bytes);\r\n\r\n                            bufBytes = bufType;\r\n                            bufType._blen = bytes;\r\n\r\n                            //-----]>\r\n\r\n                            if(isBigEndian) {\r\n                                bufType[0] = bufABytes[1];\r\n                                bufType[1] = bufABytes[0];\r\n                            }\r\n                            else {\r\n                                bufType[0] = bufABytes[0];\r\n                                bufType[1] = bufABytes[1];\r\n                            }\r\n                        }\r\n                        else {\r\n                            bufBytes = zeroUI16;\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n\r\n                    default: {\r\n                        bufType[0] = input;\r\n\r\n                        if(isBigEndian && bufType.byteLength > 1) {\r\n                            bufBytes.reverse();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //------]>\r\n\r\n                if(pktBufStrict) {\r\n                    tIdx = 0;\r\n\r\n                    while(bytes--) {\r\n                        pktBufStrict[pktSize++] = bufBytes[tIdx++];\r\n                    }\r\n                }\r\n                else {\r\n                    buffers[fieldIdx] = bufBytes;\r\n                    pktSize += bytes;\r\n                }\r\n            }\r\n\r\n            //--------]>\r\n\r\n            let result = pktBufStrict;\r\n\r\n            //--------]>\r\n\r\n            if(!result) {\r\n                result = pktBufPack && pktBufPack.length === pktSize ? pktBufPack : (pktBufPack = new Uint8Array(pktSize));\r\n\r\n                fieldIdx = schLen;\r\n                tIdx = sysOffset;\r\n\r\n                //--------]>\r\n\r\n                while(fieldIdx--) {\r\n                    for(let b = buffers[fieldIdx], i = 0, l = (b._blen || b.length); i < l; ++i) {\r\n                        result[tIdx++] = b[i];\r\n                    }\r\n                }\r\n            }\r\n\r\n            //--------]>\r\n\r\n            result[0] = id;\r\n\r\n            //--------]>\r\n\r\n            return result;\r\n        }\r\n\r\n        function unpack(bin, offset, length, cbEndInfo, target) {\r\n            target = target || (holderNew ? (useHolderArray ? [] : {}) : pktDataHolder);\r\n\r\n            //--------]>\r\n\r\n            if(!bin || typeof(bin) !== \"object\" || !pktHasStr && bin.byteLength !== pktMinSize || bin.byteLength < pktMinSize) {\r\n                return null;\r\n            }\r\n\r\n            if(!schLen) {\r\n                if(cbEndInfo) {\r\n                    cbEndInfo(sysOffset);\r\n                }\r\n\r\n                return target;\r\n            }\r\n\r\n            //--------]>\r\n\r\n            let field,\r\n                fieldIdx = schLen,\r\n\r\n                name, type, bytes, bufType, bufBytes, bufAType, bufABytes;\r\n\r\n            let pktOffset           = offset + sysOffset;\r\n\r\n            const pktOffsetStart    = pktOffset;\r\n\r\n            //--------]>\r\n\r\n            while(fieldIdx--) {\r\n                field = fields[fieldIdx];\r\n                [name, type, bytes, bufType, bufBytes, bufAType, bufABytes] = field;\r\n\r\n                //------]>\r\n\r\n                if(useHolderArray) {\r\n                    name = fieldIdx;\r\n                }\r\n\r\n                for(let i = 0; i < bytes; ++i) {\r\n                    if(pktOffset >= length) {\r\n                        return null;\r\n                    }\r\n\r\n                    if(bufAType) {\r\n                        bufABytes[i] = bin[pktOffset++];\r\n                    }\r\n                    else {\r\n                        bufBytes[i] = bin[pktOffset++];\r\n                    }\r\n                }\r\n\r\n                //------]>\r\n\r\n                switch(type) {\r\n                    case TYPE_STR: {\r\n                        if(isBigEndian) {\r\n                            bufABytes.reverse();\r\n                        }\r\n\r\n                        //--------]>\r\n\r\n                        const byteLen = bufAType[0];\r\n\r\n                        //--------]>\r\n\r\n                        if(!byteLen || byteLen >= length) {\r\n                            target[name] = \"\";\r\n                        }\r\n                        else {\r\n                            const needMem = Math.min(bufType.length - bytes, length, byteLen);\r\n\r\n                            for(let i = 0; i < needMem; ++i) {\r\n                                bufType[i] = bin[pktOffset++];\r\n                            }\r\n\r\n                            target[name] = bufType.toString(\"utf8\", 0, needMem);\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n\r\n                    default: {\r\n                        if(isBigEndian && bufType.byteLength > 1) {\r\n                            bufBytes.reverse();\r\n                        }\r\n\r\n                        target[name] = bufType[0];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(cbEndInfo) {\r\n                cbEndInfo(sysOffset + pktOffset - pktOffsetStart);\r\n            }\r\n\r\n            //--------]>\r\n\r\n            return target;\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        function buildTypedBuf(type, size) {\r\n            switch(type) {\r\n                case TYPE_STR:\r\n                    return [Uint16Array.BYTES_PER_ELEMENT, holyBuffer.alloc((size || 256) + Uint16Array.BYTES_PER_ELEMENT), new Uint16Array(1)];\r\n\r\n                case TYPE_INT:\r\n                    switch(size) {\r\n                        case 8: return [Int8Array.BYTES_PER_ELEMENT, new Int8Array(1)];\r\n                        case 16: return [Int16Array.BYTES_PER_ELEMENT, new Int16Array(1)];\r\n                        case 32: return [Int32Array.BYTES_PER_ELEMENT, new Int32Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n\r\n                case TYPE_UINT:\r\n                    switch(size) {\r\n                        case 8: return [Uint8Array.BYTES_PER_ELEMENT, new Uint8Array(1)];\r\n                        case 16: return [Uint16Array.BYTES_PER_ELEMENT, new Uint16Array(1)];\r\n                        case 32: return [Uint32Array.BYTES_PER_ELEMENT, new Uint32Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n\r\n                case TYPE_FLOAT:\r\n                    switch(size) {\r\n                        case 32: return [Float32Array.BYTES_PER_ELEMENT, new Float32Array(1)];\r\n                        case 64: return [Float64Array.BYTES_PER_ELEMENT, new Float64Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n                default:\r\n                    throw new Error(`Unknown type: ${type}`);\r\n            }\r\n        }\r\n\r\n        function getTypeId(type) {\r\n            switch(type) {\r\n                case \"s\":\r\n                case \"str\":\r\n                    return TYPE_STR;\r\n\r\n                case \"i\":\r\n                case \"int\":\r\n                    return TYPE_INT;\r\n\r\n                case \"u\":\r\n                case \"uint\":\r\n                    return TYPE_UINT;\r\n\r\n                case \"f\":\r\n                case \"float\":\r\n                    return TYPE_FLOAT;\r\n\r\n                default:\r\n                    throw new Error(`Unknown type: ${type}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------)>\r\n\r\n    function getId(data) {\r\n        return data[0];\r\n    }\r\n})();\r\n\r\n//-----------------------------------------------------\r\n\r\nmodule.exports = packer;\r\n\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------\r\n\r\nconst toString = (function() {\r\n    return function(data) {\r\n        if(data === null) {\r\n            return \"\";\r\n        }\r\n\r\n        switch(typeof(data)) {\r\n            case \"string\":      return data;\r\n\r\n            case \"undefined\":   return \"\";\r\n            case \"number\":      return isNaN(data) ? \"\" : (data + \"\");\r\n            case \"symbol\":      return data.toString();\r\n\r\n            default:            return JSON.stringify(data);\r\n        }\r\n    };\r\n})();\r\n\r\n//-----------------------------------------------------\r\n\r\nmodule.exports = toString;\r\n\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\nreturn function(url, options = {}) {\r\n    const WSocket = window.WebSocket || window.MozWebSocket;\r\n\r\n    //---------------]>\r\n\r\n    class Io extends SEE {\r\n        constructor() {\r\n            super();\r\n\r\n            //-------]>\r\n\r\n            this._reconnectionDelay = 1000 * Math.max(1, options.reconnectionDelay || 0);\r\n            this._reconnectionAttempts = options.reconnectionAttempts || Infinity;\r\n            this._reconnectionAttemptsCount = 0;\r\n\r\n            this._packMapByName = new Map();\r\n            this._unpackMapById = new Array();\r\n\r\n            //-------]>\r\n\r\n            this.reconnecting = false;\r\n\r\n            //-------]>\r\n\r\n            this.CONNECTING     = WSocket.CONNECTING;\r\n            this.OPEN           = WSocket.OPEN;\r\n            this.CLOSING        = WSocket.CLOSING;\r\n            this.CLOSED         = WSocket.CLOSED;\r\n\r\n            //-------]>\r\n\r\n            if(url) {\r\n                this.connect(url, options.secure);\r\n            }\r\n        }\r\n\r\n\r\n        get bufferedAmount() {\r\n            return this._ws.bufferedAmount;\r\n        }\r\n\r\n        get readyState() {\r\n            return this._ws.readyState;\r\n        }\r\n\r\n        get url() {\r\n            return this._ws.url;\r\n        }\r\n\r\n\r\n        isSupported() {\r\n            return typeof(WSocket) !== \"undefined\";\r\n        }\r\n\r\n\r\n        emit(name, data) {\r\n            data = this._pack(name, data);\r\n\r\n            if(data) {\r\n                this.send(data);\r\n            }\r\n\r\n            return !!data;\r\n        }\r\n\r\n        text(data) {\r\n            this.send(toString(data));\r\n        }\r\n\r\n        send(data) {\r\n            try {\r\n                this._ws.send(data);\r\n            } catch(e) {\r\n                this._emit(\"error\", e);\r\n            }\r\n        }\r\n\r\n\r\n        connect(url, secure) {\r\n            if(this._ws) {\r\n                this._ws.close();\r\n            }\r\n\r\n            //------------]>\r\n\r\n            const tWsUrlParse = url.trim().split(/(^wss?:\\/\\/)/i);\r\n\r\n            const wsUrl = tWsUrlParse.pop().replace(/^[:\\/\\/]*/, \"\");\r\n            const wsProtocol = tWsUrlParse.pop().trim();\r\n            const wsSecProtocol = !!(wsProtocol && wsProtocol.match(/^wss:\\/\\//i));\r\n\r\n            //------------]>\r\n\r\n            if(typeof(secure) === \"undefined\") {\r\n                secure = wsProtocol ? wsSecProtocol : !!document.location.protocol.match(/^https/i);\r\n            }\r\n\r\n            //------------]>\r\n\r\n            const w =\r\n                this._ws =\r\n                    new WSocket((secure ? \"wss\" : \"ws\") + \"://\" + wsUrl);\r\n\r\n            //------------]>\r\n\r\n            w.binaryType = \"arraybuffer\";\r\n\r\n            w.onmessage = wsOnMessage.bind(this, this);\r\n            w.onopen = wsOnOpen.bind(this, this);\r\n            w.onclose = wsOnClose.bind(this, this);\r\n            w.onerror = wsOnError.bind(this, this);\r\n\r\n            //------------]>\r\n\r\n            return this;\r\n        }\r\n\r\n        disconnect(code, reason) {\r\n            this._ws.close(code, reason);\r\n            this._ws = null;\r\n\r\n            //------------]>\r\n\r\n            return this;\r\n        }\r\n\r\n\r\n        packets(pack, unpack, shared) {\r\n            forEach(unpack, (name, srz) => {\r\n                this._unpackMapById.push([name, srz]);\r\n            });\r\n\r\n            forEach(pack, (name, srz) => {\r\n                this._packMapByName.set(name, [this._packMapByName.size, srz]);\r\n            });\r\n\r\n            //----------]>\r\n\r\n            if(shared) {\r\n                return this.packets(shared, shared);\r\n            }\r\n\r\n            //----------]>\r\n\r\n            return this;\r\n\r\n            //----------]>\r\n\r\n            function forEach(data, callback) {\r\n                if(!data) {\r\n                    return;\r\n                }\r\n\r\n                Object.keys(data).forEach(function(field) {\r\n                    const t = field.split(/\\(([\\[\\{]?)(\\@?)([\\}\\]]?)\\)$/);\r\n\r\n                    let name,\r\n                        useHolderArray,\r\n                        holderNew;\r\n\r\n                    //-------]>\r\n\r\n                    name = t.shift().trim();\r\n                    useHolderArray = t.shift() === \"[\";\r\n                    holderNew = t.shift() === \"@\";\r\n\r\n                    //-------]>\r\n\r\n                    testName(name);\r\n                    callback(name, packer.createPacket(data[field], useHolderArray, holderNew));\r\n                });\r\n            }\r\n\r\n            function testName(n) {\r\n                let r = [\r\n                    \"restoring\", \"restored\",\r\n                    \"open\", \"close\", \"disconnected\", \"terminated\",\r\n                    \"packet\", \"message\", \"arraybuffer\", \"error\",\r\n                    \"ping\", \"pong\"\r\n                ];\r\n\r\n                if(r.some((e) => e === n)) {\r\n                    throw new Error(`Used a reserved name: ${n}`);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        _reconnect() {\r\n            return this.connect(this.url);\r\n        }\r\n\r\n        _pack(name, data) {\r\n            const t = this._packMapByName.get(name);\r\n\r\n            //---------]>\r\n\r\n            if(!t) {\r\n                return null;\r\n            }\r\n\r\n            //---------]>\r\n\r\n            const [id, srz] = t;\r\n\r\n            //---------]>\r\n\r\n            return srz.pack(id, data);\r\n        }\r\n    }\r\n\r\n    //---------------]>\r\n\r\n    return new Io();\r\n\r\n    //---------------]>\r\n\r\n    function wsOnMessage(socket, event) {\r\n        let data = event.data;\r\n\r\n        //-----------]>\r\n\r\n        socket._emit(\"message\", data, event);\r\n\r\n        if(typeof(data) === \"string\") {\r\n            socket._emit(\"text\", data, event);\r\n            return;\r\n        }\r\n        else if(socket._emit(\"arraybuffer\", data, event)) {\r\n            return;\r\n        }\r\n\r\n        //-----------]>\r\n\r\n        data = new Uint8Array(data);\r\n\r\n        //-----------]>\r\n\r\n        const dataByteLength = data.byteLength;\r\n\r\n        let offset  = 0,\r\n            pkt     = data;\r\n\r\n        //-----------]>\r\n\r\n        while(offset < dataByteLength) {\r\n            const pktSchema = this._unpackMapById[packer.getId(pkt)];\r\n\r\n            //-----------]>\r\n\r\n            if(!pktSchema) {\r\n                break;\r\n            }\r\n\r\n            //-----------]>\r\n\r\n            const [name, srz] = pktSchema;\r\n            const message = srz.unpack(pkt, offset, dataByteLength, moveOffset);\r\n\r\n            //-----------]>\r\n\r\n            if(!message) {\r\n                break;\r\n            }\r\n\r\n            if(dataByteLength > offset) {\r\n                pkt = data.slice(offset);\r\n            }\r\n\r\n            //-----------]>\r\n\r\n            socket._emit(\"packet\", name, message);\r\n            socket._emit(name, message);\r\n        }\r\n\r\n        //-----------]>\r\n\r\n        function moveOffset(size) {\r\n            offset += size;\r\n        }\r\n    }\r\n\r\n    function wsOnOpen(socket, event) {\r\n        const rcAttemptsCount = this._reconnectionAttemptsCount;\r\n\r\n        //--------]>\r\n\r\n        this._reconnectionAttemptsCount = 0;\r\n\r\n        if(this.reconnecting) {\r\n            this.reconnecting = false;\r\n\r\n            this._emit(\"restored\", rcAttemptsCount);\r\n        }\r\n\r\n        this._emit(\"open\");\r\n    }\r\n\r\n    function wsOnClose(socket, event) {\r\n        const {code, reason} = event;\r\n\r\n        this._emit(\"close\", code, reason, event);\r\n\r\n        if(event.wasClean) {\r\n            this._emit(\"disconnected\", code, reason, event);\r\n        }\r\n        else {\r\n            const rcAttemptsCount = this._reconnectionAttemptsCount;\r\n\r\n            //--------]>\r\n\r\n            this._emit(\"terminated\", code, event);\r\n\r\n            //--------]>\r\n\r\n            if(rcAttemptsCount < this._reconnectionAttempts) {\r\n                this._reconnectionAttemptsCount++;\r\n\r\n                setTimeout(() => {\r\n                    this.reconnecting = true;\r\n                    this._reconnect();\r\n\r\n                    this._emit(\"restoring\", rcAttemptsCount);\r\n                }, this._reconnectionDelay);\r\n            }\r\n            else {\r\n                this.reconnecting = false;\r\n\r\n                this._emit(\"unrestored\", rcAttemptsCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function wsOnError(socket, error) {\r\n        this._emit(\"error\", error);\r\n    }\r\n};\r\n\r\n})({});"]}