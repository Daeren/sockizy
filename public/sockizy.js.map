{"version":3,"sources":["sockizyES6.js"],"names":["io","module","SEE","_events","Object","create","name","listener","ev","_arrayCloneWith","length","argsLen","arguments","evLen","pop","Array","indexOf","_arrayCloneWithout","func","call","args","i","apply","arr","n","copy","t","exports","packer","holyBuffer","Buffer","MAX_ARGUMENTS_LENGTH","K_MAX_LENGTH","alloc","byteLength","from","data","utf8ToBytes","toString","utf8Slice","string","units","Infinity","codePoint","leadSurrogate","bytes","charCodeAt","push","Error","buf","start","end","Math","min","res","firstByte","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","createBuffer","RangeError","Uint8Array","size","write","swap16","offset","remaining","blitBuffer","len","swap","src","dst","b","m","codePoints","String","fromCharCode","slice","prototype","defineProperty","isBigEndian","a","Uint32Array","buffer","byteOffset","sysOffset","createPacket","getSize","getId","schema","isArray","schLen","fields","buffers","pktDataHolder","pktMinSize","pktHasStr","pktBufStrict","pktBufPack","pktBufUnpack","pktSysBVMSize","Uint16Array","pktSysBufMSize","TYPE_STR","TYPE_INT","TYPE_UINT","TYPE_FLOAT","e","split","shift","subType","type","getTypeId","replace","parseInt","buildTypedBuf","bufType","bufAType","bufBytes","bufABytes","pack","unpack","id","input","field","pktSize","tLen","tIdx","byteLen","reverse","result","resOffset","l","bin","target","ArrayBuffer","set","binLen","pktOffset","needMem","BYTES_PER_ELEMENT","Int8Array","Int16Array","Int32Array","Float32Array","Float64Array","holder","url","options","Io","connect","_packMapByName","Map","_unpackMapById","reconnecting","WebSocket","_pack","send","_ws","_emit","close","w","binaryType","onmessage","wsOnMessage","bind","onopen","wsOnOpen","onclose","wsOnClose","onerror","wsOnError","code","reason","shared","forEach","srz","packets","callback","keys","testName","r","some","get","app","socket","event","dataByteLength","pkt","pktSchema","message","wasClean","setTimeout","_reconnect","error"],"mappings":"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","file":"sockizy.js","sourcesContent":["const io = (function(module) {\r\n'use strict';\r\n\r\n\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------\r\n\r\nclass SEE {\r\n    constructor() {\r\n        this._events = Object.create(null);\r\n    }\r\n\r\n\r\n    on(name, listener) {\r\n        const ev = this._events[name];\r\n\r\n        if(typeof(ev) === \"function\") {\r\n            this._events[name] = [ev, listener];\r\n        } else {\r\n            this._events[name] = ev ? this._arrayCloneWith(ev, ev.length, listener) : listener;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    off(name, listener) {\r\n        const argsLen = arguments.length;\r\n\r\n        //--------------]>\r\n\r\n        if(!argsLen) {\r\n            this._events = Object.create(null);\r\n            return this;\r\n        }\r\n\r\n        //--------------]>\r\n\r\n        const ev = this._events[name];\r\n\r\n        if(typeof(ev) === \"function\") {\r\n            if(argsLen === 1 || ev === listener) {\r\n                this._events[name] = null;\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        //--------------]>\r\n\r\n        const evLen = ev && ev.length;\r\n\r\n        //--------------]>\r\n\r\n        if(!evLen) {\r\n            return this;\r\n        }\r\n\r\n        //--------------]>\r\n\r\n        if(argsLen === 1) {\r\n            if(evLen === 1) {\r\n                ev.pop();\r\n            } else {\r\n                this._events[name] = new Array();\r\n            }\r\n        } else if(evLen === 1) {\r\n            if(ev[0] === listener) {\r\n                ev.pop();\r\n            }\r\n        } else if(ev.indexOf(listener) >= 0) {\r\n            this._events[name] = this._arrayCloneWithout(ev, evLen, listener);\r\n        }\r\n\r\n        //--------------]>\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    _emit(name) {\r\n        const ev    = this._events[name];\r\n        const func  = typeof(ev) === \"function\" && ev;\r\n\r\n        const evLen = func || ev && ev.length;\r\n\r\n        //--------------]>\r\n\r\n        if(!evLen) {\r\n            if(name === \"error\") {\r\n                throw arguments[1];\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        //--------------]>\r\n\r\n        const argsLen = arguments.length;\r\n\r\n        //--------------]>\r\n\r\n        if(func) {\r\n            switch(argsLen) {\r\n                case 1: func.call(this); break;\r\n                case 2: func.call(this, arguments[1]); break;\r\n                case 3: func.call(this, arguments[1], arguments[2]); break;\r\n                case 4: func.call(this, arguments[1], arguments[2], arguments[3]); break;\r\n\r\n                default:\r\n                    const args = new Array(argsLen - 1);\r\n\r\n                    for(let i = 1; i < argsLen; i++) {\r\n                        args[i - 1] = arguments[i];\r\n                    }\r\n\r\n                    func.apply(this, args);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        switch(argsLen) {\r\n            case 1:\r\n                for(let i = 0; i < evLen; i++) {\r\n                    ev[i].call(this);\r\n                }\r\n\r\n                break;\r\n\r\n            case 2:\r\n                for(let i = 0; i < evLen; i++) {\r\n                    ev[i].call(this, arguments[1]);\r\n                }\r\n\r\n                break;\r\n\r\n            case 3:\r\n                for(let i = 0; i < evLen; i++) {\r\n                    ev[i].call(this, arguments[1], arguments[2]);\r\n                }\r\n\r\n                break;\r\n\r\n            case 4:\r\n                for(let i = 0; i < evLen; i++) {\r\n                    ev[i].call(this, arguments[1], arguments[2], arguments[3]);\r\n                }\r\n\r\n                break;\r\n\r\n            default:\r\n                const args = new Array(argsLen - 1);\r\n\r\n                for(let i = 1; i < argsLen; i++) {\r\n                    args[i - 1] = arguments[i];\r\n                }\r\n\r\n                for(let i = 0; i < evLen; i++) {\r\n                    ev[i].apply(this, args);\r\n                }\r\n        }\r\n\r\n        //--------------]>\r\n\r\n        return true;\r\n    }\r\n\r\n    _arrayCloneWithout(arr, n, listener) {\r\n        const copy = new Array(--n);\r\n\r\n        let t;\r\n\r\n        while(n--) {\r\n            t = arr[n];\r\n\r\n            if(listener !== t) {\r\n                copy[n] = t;\r\n            }\r\n        }\r\n\r\n        return copy;\r\n    }\r\n\r\n    _arrayCloneWith(arr, n, listener) {\r\n        const copy = new Array(n + 1);\r\n\r\n        while(n--) {\r\n            copy[n] = arr[n];\r\n        }\r\n\r\n        copy[n] = listener;\r\n\r\n        return copy;\r\n    }\r\n}\r\n\r\n//-----------------------------------------------------\r\n\r\nmodule.exports = SEE;\r\n\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\n\"use strict\";\r\n\r\n//-----------------------------------------------------\r\n\r\nconst packer = (function() {\r\n    const holyBuffer = typeof(Buffer) !== \"undefined\" ? Buffer : (function() {\r\n            const MAX_ARGUMENTS_LENGTH = 0x1000;\r\n            const K_MAX_LENGTH = 0x7fffffff;\r\n\r\n            const Buffer = function() {};\r\n\r\n            //---------------------]>\r\n\r\n            Buffer.alloc = alloc;\r\n            Buffer.byteLength = byteLength;\r\n            Buffer.from = function(data) {\r\n                if(typeof(data) === \"string\") {\r\n                    return utf8ToBytes(data);\r\n                } else {\r\n                    return {\r\n                        toString() {\r\n                            return utf8Slice(data, 0, data.length);\r\n                        }\r\n                    };\r\n                }\r\n            };\r\n\r\n            //---------------------]>\r\n\r\n            return Buffer;\r\n\r\n            //---------------------]>\r\n\r\n            function utf8ToBytes(string, units) {\r\n                units = units || Infinity;\r\n\r\n                const length = string.length;\r\n\r\n                let codePoint;\r\n                let leadSurrogate = null;\r\n                let bytes = new Array();\r\n\r\n                for(let i = 0; i < length; ++i) {\r\n                    codePoint = string.charCodeAt(i);\r\n\r\n                    // is surrogate component\r\n                    if(codePoint > 0xD7FF && codePoint < 0xE000) {\r\n                        // last char was a lead\r\n                        if(!leadSurrogate) {\r\n                            // no lead yet\r\n                            if(codePoint > 0xDBFF) {\r\n                                // unexpected trail\r\n                                if((units -= 3) > -1) {\r\n                                    bytes.push(0xEF, 0xBF, 0xBD);\r\n                                }\r\n\r\n                                continue;\r\n                            } else if(i + 1 === length) {\r\n                                // unpaired lead\r\n                                if((units -= 3) > -1) {\r\n                                    bytes.push(0xEF, 0xBF, 0xBD);\r\n                                }\r\n\r\n                                continue;\r\n                            }\r\n\r\n                            // valid lead\r\n                            leadSurrogate = codePoint;\r\n\r\n                            continue;\r\n                        }\r\n\r\n                        // 2 leads in a row\r\n                        if(codePoint < 0xDC00) {\r\n                            if((units -= 3) > -1) {\r\n                                bytes.push(0xEF, 0xBF, 0xBD);\r\n                            }\r\n\r\n                            leadSurrogate = codePoint;\r\n\r\n                            continue;\r\n                        }\r\n\r\n                        // valid surrogate pair\r\n                        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\r\n                    } else if(leadSurrogate) {\r\n                        // valid bmp char, but last char was a lead\r\n                        if((units -= 3) > -1) {\r\n                            bytes.push(0xEF, 0xBF, 0xBD);\r\n                        }\r\n                    }\r\n\r\n                    leadSurrogate = null;\r\n\r\n                    // encode utf8\r\n                    if(codePoint < 0x80) {\r\n                        if((units -= 1) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(codePoint);\r\n                    } else if(codePoint < 0x800) {\r\n                        if((units -= 2) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0x6 | 0xC0,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    } else if(codePoint < 0x10000) {\r\n                        if((units -= 3) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0xC | 0xE0,\r\n                            codePoint >> 0x6 & 0x3F | 0x80,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    } else if(codePoint < 0x110000) {\r\n                        if((units -= 4) < 0) {\r\n                            break;\r\n                        }\r\n\r\n                        bytes.push(\r\n                            codePoint >> 0x12 | 0xF0,\r\n                            codePoint >> 0xC & 0x3F | 0x80,\r\n                            codePoint >> 0x6 & 0x3F | 0x80,\r\n                            codePoint & 0x3F | 0x80\r\n                        );\r\n                    } else {\r\n                        throw new Error(\"Invalid code point\");\r\n                    }\r\n                }\r\n\r\n                return bytes;\r\n            }\r\n\r\n            function utf8Slice(buf, start, end) {\r\n                end = Math.min(buf.length, end);\r\n\r\n                const res = new Array();\r\n                let i = start;\r\n\r\n                while(i < end) {\r\n                    let firstByte = buf[i];\r\n                    let codePoint = null;\r\n                    let bytesPerSequence = (firstByte > 0xEF) ? 4\r\n                        : (firstByte > 0xDF) ? 3\r\n                            : (firstByte > 0xBF) ? 2\r\n                                : 1;\r\n\r\n                    if(i + bytesPerSequence <= end) {\r\n                        let secondByte, thirdByte, fourthByte, tempCodePoint;\r\n\r\n                        switch(bytesPerSequence) {\r\n                            case 1:\r\n                                if(firstByte < 0x80) {\r\n                                    codePoint = firstByte;\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 2:\r\n                                secondByte = buf[i + 1];\r\n\r\n                                if((secondByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0x7F) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 3:\r\n                                secondByte = buf[i + 1];\r\n                                thirdByte = buf[i + 2];\r\n\r\n                                if((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n\r\n                                break;\r\n\r\n                            case 4:\r\n                                secondByte = buf[i + 1];\r\n                                thirdByte = buf[i + 2];\r\n                                fourthByte = buf[i + 3];\r\n\r\n                                if((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\r\n                                    tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\r\n\r\n                                    if(tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\r\n                                        codePoint = tempCodePoint;\r\n                                    }\r\n                                }\r\n                        }\r\n                    }\r\n\r\n                    if(codePoint === null) {\r\n                        // we did not generate a valid codePoint so insert a\r\n                        // replacement char (U+FFFD) and advance only 1 byte\r\n                        codePoint = 0xFFFD;\r\n                        bytesPerSequence = 1;\r\n                    } else if(codePoint > 0xFFFF) {\r\n                        // encode to utf16 (surrogate pair dance)\r\n                        codePoint -= 0x10000;\r\n                        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\r\n                        codePoint = 0xDC00 | codePoint & 0x3FF;\r\n                    }\r\n\r\n                    res.push(codePoint);\r\n                    i += bytesPerSequence;\r\n                }\r\n\r\n                return decodeCodePointsArray(res);\r\n            }\r\n\r\n            function createBuffer(length) {\r\n                if(length > K_MAX_LENGTH) {\r\n                    throw new RangeError(\"Invalid typed array length\");\r\n                }\r\n\r\n                const buf = new Uint8Array(length);\r\n                // buf.__proto__ = Buffer.prototype;\r\n\r\n                return buf;\r\n            }\r\n\r\n            function byteLength(string) {\r\n                return utf8ToBytes(string).length;\r\n            }\r\n\r\n            //--------)>\r\n\r\n            function alloc(size) {\r\n                const buf = createBuffer(size);\r\n\r\n                buf.write = write;\r\n                buf.swap16 = swap16;\r\n\r\n                return buf;\r\n            }\r\n\r\n            //--------)>\r\n\r\n            function write(string, offset, length) {\r\n                offset = offset || 0;\r\n\r\n                const remaining = this.length - offset;\r\n\r\n                if(!length || length > remaining) {\r\n                    length = remaining;\r\n                }\r\n\r\n                return blitBuffer(utf8ToBytes(string, this.length - offset), this, offset, length);\r\n            }\r\n\r\n            function swap16() {\r\n                const len = this.length;\r\n\r\n                if(len % 2 !== 0) {\r\n                    throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\r\n                }\r\n\r\n                for(let i = 0; i < len; i += 2) {\r\n                    swap(this, i, i + 1);\r\n                }\r\n\r\n                return this;\r\n            }\r\n\r\n            //--------)>\r\n\r\n            function blitBuffer(src, dst, offset, length) {\r\n                let i;\r\n\r\n                for(i = 0; i < length; ++i) {\r\n                    if((i + offset >= dst.length) || (i >= src.length)) {\r\n                        break;\r\n                    }\r\n\r\n                    dst[i + offset] = src[i];\r\n                }\r\n\r\n                return i;\r\n            }\r\n\r\n            function swap(b, n, m) {\r\n                const i = b[n];\r\n                b[n] = b[m];\r\n                b[m] = i;\r\n            }\r\n\r\n            function decodeCodePointsArray (codePoints) {\r\n                const len = codePoints.length;\r\n\r\n                if(len <= MAX_ARGUMENTS_LENGTH) {\r\n                    return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\r\n                }\r\n\r\n                // Decode in chunks to avoid \"call stack size exceeded\".\r\n                let res = \"\";\r\n                let i = 0;\r\n\r\n                while(i < len) {\r\n                    res += String.fromCharCode.apply(\r\n                        String,\r\n                        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\r\n                    );\r\n                }\r\n\r\n                return res;\r\n            }\r\n        })();\r\n\r\n    //---------)>\r\n\r\n    if(!Uint8Array.prototype.slice) {\r\n        Object.defineProperty(Uint8Array.prototype, \"slice\", {\r\n            \"value\": Array.prototype.slice\r\n        });\r\n    }\r\n\r\n    //-------------------------]>\r\n\r\n    const isBigEndian = (function() {\r\n        const a = new Uint32Array([0x12345678]);\r\n        const b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);\r\n\r\n        return b[0] === 0x12;\r\n    })();\r\n\r\n    const sysOffset = 3;\r\n\r\n    //-------------------------]>\r\n\r\n    return {isBigEndian, sysOffset, createPacket, getSize, getId};\r\n\r\n    //-------------------------]>\r\n\r\n    function createPacket(schema) {\r\n        if(!Array.isArray(schema)) {\r\n            schema = new Array();\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        const schLen        = schema.length;\r\n\r\n        const fields        = new Array(schLen);\r\n        const buffers       = new Array(schLen);\r\n\r\n        let pktDataHolder   = Object.create(null),\r\n            pktMinSize      = 0,\r\n            pktHasStr       = false,\r\n\r\n            pktBufStrict    = null,\r\n            pktBufPack      = null,\r\n            pktBufUnpack    = null;\r\n\r\n        let pktSysBVMSize   = new Uint16Array(1),\r\n            pktSysBufMSize  = new Uint8Array(pktSysBVMSize.buffer);\r\n\r\n        //-----------------]>\r\n\r\n        const TYPE_STR      = 1;\r\n        const TYPE_INT      = 2;\r\n        const TYPE_UINT     = 4;\r\n        const TYPE_FLOAT    = 8;\r\n\r\n        //-----------------]>\r\n\r\n        for(let e, i = 0; i < schLen; i++) {\r\n            e = schema[i].split(\":\");\r\n\r\n            //---------]>\r\n\r\n            const name      = e.shift();\r\n            const subType   = e.shift();\r\n\r\n            const type      = getTypeId(subType.replace(/[\\d\\[\\]]/g, \"\"));\r\n            const size      = parseInt(subType.replace(/\\D/g, \"\"), 10) || 0;\r\n\r\n            const [\r\n                bytes,\r\n                bufType,\r\n                bufAType\r\n            ]               = buildTypedBuf(type, size);\r\n\r\n            const bufBytes  = (TYPE_STR & type) ? null : new Uint8Array(bufType.buffer);\r\n            const bufABytes = bufAType ? new Uint8Array(bufAType.buffer) : null;\r\n\r\n            //---------]>\r\n\r\n            fields[i] = [name, type, bytes, bufType, bufBytes, bufAType, bufABytes];\r\n\r\n            pktMinSize += bytes;\r\n\r\n            if(!pktHasStr && (TYPE_STR & type)) {\r\n                pktHasStr = true;\r\n            }\r\n        }\r\n\r\n        pktMinSize += sysOffset;\r\n\r\n        if(!pktHasStr) {\r\n            pktBufStrict = new Uint8Array(pktMinSize);\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        return {pack, unpack};\r\n\r\n        //-----------------]>\r\n\r\n        function pack(id, data) {\r\n            const isArray = Array.isArray(data);\r\n\r\n            let input, field,\r\n                name, type, bytes, bufType, bufBytes, bufAType, bufABytes;\r\n\r\n            let len     = schLen;\r\n\r\n            let pktSize = sysOffset,\r\n                tLen, tIdx;\r\n\r\n            //--------]>\r\n\r\n\r\n            while(len--) {\r\n                field = fields[len];\r\n                [name, type, bytes, bufType, bufBytes, bufAType, bufABytes] = field;\r\n\r\n                input = data[isArray ? len : name];\r\n\r\n                //------]>\r\n\r\n                switch(type) {\r\n                    case TYPE_STR: {\r\n                        let offset = bufAType.byteLength;\r\n                        let byteLen = input ? bufType.write(input, offset) : 0;\r\n\r\n                        //-----]>\r\n\r\n                        bufAType[0] = byteLen;\r\n                        bufType[0] = bufABytes[0];\r\n                        bufType[1] = bufABytes[1];\r\n\r\n                        //-----]>\r\n\r\n                        if(byteLen && isBigEndian) {\r\n                            bufType.swap16();\r\n                        }\r\n\r\n                        //-----]>\r\n\r\n                        byteLen += offset;\r\n\r\n                        //-----]>\r\n\r\n                        if(!bufBytes || bufBytes.length !== byteLen) {\r\n                            bufBytes = field[4] = new Uint8Array(byteLen);\r\n                        }\r\n\r\n                        while(byteLen--) {\r\n                            bufBytes[byteLen] = bufType[byteLen];\r\n                        }\r\n\r\n                        break;\r\n                    }\r\n\r\n                    default:\r\n                        bufType[0] = input;\r\n\r\n                        if(isBigEndian && bufType.byteLength > 1) {\r\n                            bufType.reverse();\r\n                        }\r\n                }\r\n\r\n                //------]>\r\n\r\n                tLen = bufBytes.length;\r\n\r\n                if(pktBufStrict) {\r\n                    tIdx = 0;\r\n\r\n                    while(tLen--) {\r\n                        pktBufStrict[pktSize++] = bufBytes[tIdx++];\r\n                    }\r\n                }\r\n                else {\r\n                    buffers[len] = bufBytes;\r\n                    pktSize += tLen;\r\n                }\r\n            }\r\n\r\n            if(pktBufStrict) {\r\n                pktBufStrict[0] = id;\r\n                return pktBufStrict;\r\n            }\r\n\r\n            //--------]>\r\n\r\n            let result = pktBufPack && pktBufPack.length === pktSize ? pktBufPack : (pktBufUnpack && pktBufUnpack.length === pktSize ? pktBufUnpack : null);\r\n            let resOffset = sysOffset;\r\n\r\n            len = schLen;\r\n\r\n            //--------]>\r\n\r\n            if(!result) {\r\n                result = pktBufPack = new Uint8Array(pktSize);\r\n            }\r\n\r\n            while(len--) {\r\n                for(let b = buffers[len], i = 0, l = b.length; i < l; i++) {\r\n                    result[resOffset++] = b[i];\r\n                }\r\n            }\r\n\r\n            //--------]>\r\n\r\n            pktSysBVMSize[0] = pktSize;\r\n\r\n            result[0] = pktSysBufMSize[0];\r\n            result[1] = pktSysBufMSize[1];\r\n            result[2] = id;\r\n\r\n            //--------]>\r\n\r\n            return result;\r\n        }\r\n\r\n        function unpack(bin, target) {\r\n            target = target || pktDataHolder;\r\n\r\n            //--------]>\r\n\r\n            if(!bin || typeof(bin) !== \"object\" || !pktHasStr && bin.byteLength !== pktMinSize || bin.byteLength < pktMinSize) {\r\n                return null;\r\n            }\r\n\r\n            if(!schLen) {\r\n                return target;\r\n            }\r\n\r\n            if(bin instanceof ArrayBuffer) {\r\n                const buf = pktBufUnpack && pktBufUnpack.length === bin.length ? pktBufUnpack : (pktBufPack && pktBufPack.length === bin.length ? pktBufPack : null);\r\n\r\n                if(buf) {\r\n                    buf.set(bin);\r\n                    bin = buf;\r\n                }\r\n                else {\r\n                    bin = pktBufUnpack = new Uint8Array(bin);\r\n                }\r\n            }\r\n\r\n            //--------]>\r\n\r\n            const binLen = bin.byteLength;\r\n\r\n            let field,\r\n                len = schLen,\r\n                name, type, bytes, bufType, bufBytes, bufAType, bufABytes;\r\n\r\n            let pktOffset = sysOffset;\r\n\r\n            //--------]>\r\n\r\n            while(len--) {\r\n                field = fields[len];\r\n                [name, type, bytes, bufType, bufBytes, bufAType, bufABytes] = field;\r\n\r\n                //------]>\r\n\r\n                for(let i = 0; i < bytes; i++) {\r\n                    if(pktOffset >= binLen) {\r\n                        return null;\r\n                    }\r\n\r\n                    if(bufAType) {\r\n                        bufABytes[i] = bin[pktOffset++];\r\n                    }\r\n                    else {\r\n                        bufBytes[i] = bin[pktOffset++];\r\n                    }\r\n                }\r\n\r\n                //------]>\r\n\r\n                switch(type) {\r\n                    case TYPE_STR: {\r\n                        if(isBigEndian) {\r\n                            bufAType.reverse();\r\n                        }\r\n\r\n                        //--------]>\r\n\r\n                        const byteLen = bufAType[0];\r\n                        const needMem = Math.min(byteLen, binLen);\r\n\r\n                        //--------]>\r\n\r\n                        bufType = holyBuffer.from(bin.slice(pktOffset, pktOffset + needMem));\r\n\r\n                        if(isBigEndian) {\r\n                            bufType.swap16();\r\n                        }\r\n\r\n                        pktOffset += needMem;\r\n\r\n                        //--------]>\r\n\r\n                        target[name] = bufType.toString();\r\n\r\n                        break;\r\n                    }\r\n\r\n                    default:\r\n                        if(isBigEndian && bufType.byteLength > 1) {\r\n                            bufType.reverse();\r\n                        }\r\n\r\n                        target[name] = bufType[0];\r\n                }\r\n            }\r\n\r\n            //--------]>\r\n\r\n            return target;\r\n        }\r\n\r\n        //-----------------]>\r\n\r\n        function buildTypedBuf(type, size) {\r\n            switch(type) {\r\n                case TYPE_STR:\r\n                    if(size && (size % Uint16Array.BYTES_PER_ELEMENT) !== 0) {\r\n                        throw new RangeError(`Buffer size must be a multiple of 16-bits | str:${size}`);\r\n                    }\r\n\r\n                    return [Uint16Array.BYTES_PER_ELEMENT, holyBuffer.alloc(size || 256), new Uint16Array(1)];\r\n\r\n                case TYPE_INT:\r\n                    switch(size) {\r\n                        case 8: return [Int8Array.BYTES_PER_ELEMENT, new Int8Array(1)];\r\n                        case 16: return [Int16Array.BYTES_PER_ELEMENT, new Int16Array(1)];\r\n                        case 32: return [Int32Array.BYTES_PER_ELEMENT, new Int32Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n\r\n                case TYPE_UINT:\r\n                    switch(size) {\r\n                        case 8: return [Uint8Array.BYTES_PER_ELEMENT, new Uint8Array(1)];\r\n                        case 16: return [Uint16Array.BYTES_PER_ELEMENT, new Uint16Array(1)];\r\n                        case 32: return [Uint32Array.BYTES_PER_ELEMENT, new Uint32Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n\r\n                case TYPE_FLOAT:\r\n                    switch(size) {\r\n                        case 32: return [Float32Array.BYTES_PER_ELEMENT, new Float32Array(1)];\r\n                        case 64: return [Float64Array.BYTES_PER_ELEMENT, new Float64Array(1)];\r\n\r\n                        default:\r\n                            throw new Error(`Unknown size: ${size}`);\r\n                    }\r\n\r\n                default:\r\n                    throw new Error(`Unknown type: ${type}`);\r\n            }\r\n        }\r\n\r\n        function getTypeId(type) {\r\n            switch(type) {\r\n                case \"str\": return TYPE_STR;\r\n\r\n                case \"int\": return TYPE_INT;\r\n                case \"uint\": return TYPE_UINT;\r\n                case \"float\": return TYPE_FLOAT;\r\n\r\n                default:\r\n                    throw new Error(`Unknown type: ${type}`);\r\n            }\r\n        }\r\n    }\r\n\r\n    //-----------)>\r\n\r\n    function getSize(data, holder) {\r\n        if(holder) {\r\n            holder.set(data);\r\n        }\r\n        else {\r\n            holder = new Uint16Array(data);\r\n        }\r\n\r\n        return holder[0];\r\n    }\r\n\r\n    function getId(data, holder) {\r\n        if(holder) {\r\n            holder.set(data);\r\n            return holder[0];\r\n        }\r\n        else {\r\n            return data[sysOffset - 1];\r\n        }\r\n    }\r\n})();\r\n\r\n//-----------------------------------------------------\r\n\r\nmodule.exports = packer;\r\n\r\n//-----------------------------------------------------\r\n//\r\n// Author: Daeren\r\n// Site: 666.io\r\n//\r\n//-----------------------------------------------------\r\n\r\nreturn function(url, options) {\r\n    class Io extends SEE {\r\n        constructor() {\r\n            super();\r\n\r\n            if(url) {\r\n                this.connect(url);\r\n            }\r\n\r\n            this._packMapByName = new Map();\r\n            this._unpackMapById = new Array();\r\n\r\n            this.reconnecting = false;\r\n        }\r\n\r\n\r\n        isSupported() {\r\n            return typeof(WebSocket) !== \"undefined\";\r\n        }\r\n\r\n\r\n        emit(name, data) {\r\n            data = this._pack(name, data);\r\n\r\n            if(data) {\r\n                this.send(data);\r\n            }\r\n\r\n            return !!data;\r\n        }\r\n\r\n        send(data) {\r\n            try {\r\n                this._ws.send(data);\r\n            } catch(e) {\r\n                this._emit(\"error\", e);\r\n            }\r\n        }\r\n\r\n\r\n        connect(url) {\r\n            if(this._ws) {\r\n                this._ws.close();\r\n            }\r\n\r\n            //------------]>\r\n\r\n            const w = this._ws = new WebSocket(url);\r\n\r\n            //------------]>\r\n\r\n            this.url = url;\r\n\r\n            w.binaryType = \"arraybuffer\";\r\n\r\n            w.onmessage = wsOnMessage.bind(this, this);\r\n            w.onopen = wsOnOpen.bind(this, this);\r\n            w.onclose = wsOnClose.bind(this, this);\r\n            w.onerror = wsOnError.bind(this, this);\r\n        }\r\n\r\n        disconnect(code, reason) {\r\n            this._ws.close(code, reason);\r\n            this._ws = null;\r\n        }\r\n\r\n\r\n        packets(pack, unpack, shared) {\r\n            forEach(unpack, (name, srz) => {\r\n                this._unpackMapById.push([name, srz]);\r\n            });\r\n\r\n            forEach(pack, (name, srz) => {\r\n                this._packMapByName.set(name, [this._packMapByName.size, srz]);\r\n            });\r\n\r\n            //----------]>\r\n\r\n            if(shared) {\r\n                return this.packets(shared, shared);\r\n            }\r\n\r\n            //----------]>\r\n\r\n            return this;\r\n\r\n            //----------]>\r\n\r\n            function forEach(data, callback) {\r\n                if(!data) {\r\n                    return;\r\n                }\r\n\r\n                Object.keys(data).forEach(function(field) {\r\n                    testName(field);\r\n                    callback(field, packer.createPacket(data[field]));\r\n                });\r\n            }\r\n\r\n            function testName(n) {\r\n                let r = [\r\n                    \"restoring\", \"restored\",\r\n                    \"open\", \"close\", \"disconnected\", \"terminated\",\r\n                    \"packet\", \"message\", \"arraybuffer\", \"error\"\r\n                ];\r\n\r\n                if(r.some(e => e === n)) {\r\n                    throw new Error(`Used a reserved name: ${n}`);\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        _reconnect() {\r\n            return this.connect(this.url);\r\n        }\r\n\r\n        _pack(name, data) {\r\n            const t = this._packMapByName.get(name);\r\n\r\n            //---------]>\r\n\r\n            if(!t) {\r\n                return null;\r\n            }\r\n\r\n            //---------]>\r\n\r\n            const [id, srz] = t;\r\n\r\n            //---------]>\r\n\r\n            return srz.pack(id, data);\r\n        }\r\n    }\r\n\r\n    //---------------]>\r\n\r\n    const app = new Io();\r\n\r\n    //---------------]>\r\n\r\n    return app;\r\n\r\n    //---------------]>\r\n\r\n    function wsOnMessage(socket, event) {\r\n        let data = event.data;\r\n\r\n        //-----------]>\r\n\r\n        socket._emit(\"message\", data, event);\r\n\r\n        if(socket._emit(\"arraybuffer\", data, event)) {\r\n            return;\r\n        }\r\n\r\n        //-----------]>\r\n\r\n        const dataByteLength = data.byteLength;\r\n\r\n        //-----------]>\r\n\r\n        if(!data || !(data instanceof ArrayBuffer) || dataByteLength < packer.sysOffset) {\r\n            return;\r\n        }\r\n\r\n        data = new Uint8Array(data);\r\n\r\n        //-----------]>\r\n\r\n        let offset  = 0,\r\n            pkt     = data;\r\n\r\n        //-----------]>\r\n\r\n        while(offset < dataByteLength) {\r\n            const pktSchema = app._unpackMapById[packer.getId(pkt)];\r\n            const pktSize   = pktSchema ? packer.getSize(pkt) : 0;\r\n\r\n            //-----------]>\r\n\r\n            if(!pktSchema || !pktSize) {\r\n                break;\r\n            }\r\n\r\n            //-----------]>\r\n\r\n            const [name, srz] = pktSchema;\r\n            const message = srz.unpack(pkt);\r\n\r\n            //-----------]>\r\n\r\n            offset += pktSize;\r\n\r\n            if(dataByteLength > offset) {\r\n                pkt = data.slice(offset);\r\n            }\r\n\r\n            if(message) {\r\n                socket._emit(\"packet\", name, message);\r\n                socket._emit(name, message);\r\n            }\r\n        }\r\n    }\r\n\r\n    function wsOnOpen(socket, event) {\r\n        if(app.reconnecting) {\r\n            app.reconnecting = false;\r\n            app._emit(\"restored\");\r\n        }\r\n\r\n        app._emit(\"open\");\r\n    }\r\n\r\n    function wsOnClose(socket, event) {\r\n        const {code, reason} = event;\r\n\r\n        app._emit(\"close\", code, reason, event);\r\n\r\n        if(event.wasClean) {\r\n            app._emit(\"disconnected\", code, reason, event);\r\n        }\r\n        else {\r\n            app._emit(\"terminated\", code, event);\r\n\r\n            setTimeout(function() {\r\n                app.reconnecting = true;\r\n                app._reconnect();\r\n\r\n                app._emit(\"restoring\");\r\n            }, 1000 * 2);\r\n        }\r\n    }\r\n\r\n    function wsOnError(socket, error) {\r\n        app._emit(\"error\", error);\r\n    }\r\n}\r\n\r\n})({});"]}